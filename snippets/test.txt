    @Test
    @Order(6)
    @DisplayName("6 - getSingleType")
    void getType() {
        System.out.println("Tutte le occorrenze della enumeration con toString() -> tag");

        //--tag
        //--esiste nella enumeration
        System.out.println(VUOTA);
        LIVELLI().forEach(this::getTypeBase);
    }

    //--tag
    //--esiste nella enumeration
    void getTypeBase(Arguments arg) {
        Object[] mat = arg.get();
        sorgente = (String) mat[0];
        previstoBooleano = (boolean) mat[1];
        type = AELogLevel.getType(sorgente);
        assertTrue(previstoBooleano ? type != null : type == null);

        System.out.println(VUOTA);
        System.out.println(String.format("%s%s%s", type, FORWARD, type != null ? type.getTag() : "non esiste"));
    }


    @ParameterizedTest
    @MethodSource(value = "CLAZZ_FOR_NAME")
    @Order(13)
    @DisplayName("13 - getClazz")
        //--clazz
        //--simpleName
    void getClazz(final Class clazzFromStream, final String simpleName) {
        System.out.println("13 - getClazz");
        System.out.println(VUOTA);

        sorgente = simpleName;
        sorgente2 = clazzFromStream.getCanonicalName();
        System.out.println(sorgente);
        System.out.println(VUOTA);

        clazz = service.getClazzFromName(sorgente);
        assertNotNull(clazz);
        System.out.println(VUOTA);
        System.out.println(String.format("Trovata la classe %s, tramite il simpleName %s", clazzFromStream.getSimpleName(), sorgente));
    }
